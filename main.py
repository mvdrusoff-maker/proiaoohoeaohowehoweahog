import logging
import asyncio
import aiosqlite
import time
import os
import urllib.parse
import base64
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.strategy import FSMStrategy
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ContentType, Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command, CommandStart, StateFilter
import aiohttp
import json

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import *
except ImportError:
    BOT_TOKEN = os.getenv('BOT_TOKEN', '8057715167:AAEEv01CdStyZrK_Icb6ktLppZU85tXvnHU')
    ADMIN_ID = int(os.getenv('ADMIN_ID', '7942871538'))
    YOOMONEY_CLIENT_ID = os.getenv('YOOMONEY_CLIENT_ID', '9D587BEF83BC7D307C5F30014EA89CF3D86383CF3B9D978E58C8A3BB0C074BBD')
    YOOMONEY_CLIENT_SECRET = os.getenv('YOOMONEY_CLIENT_SECRET', '44C7CD4D233416CF3DE4D8F6E86ADD8AA82890C6D4EE521F46FEABFA9A3F95C48AC256C4783F2C69477705CD04983B38E02D97837C7A1CBE2933929374190452')
    YOOMONEY_WALLET = os.getenv('YOOMONEY_WALLET', '4100119031273795')
    SBP_PHONE = os.getenv('SBP_PHONE', '+79931321491')
    BANK_CARD = os.getenv('BANK_CARD', '2204120124383866')
    BANK_NAME = os.getenv('BANK_NAME', '–ÆMoney')
    RECIPIENT_NAME = os.getenv('RECIPIENT_NAME', '–ê–Ω–Ω–∞ –í.')
    DATABASE_URL = os.getenv('DATABASE_URL', 'donations.db')
    DONATION_AMOUNTS = [40, 80, 120]
    PORT = int(os.getenv('PORT', 5000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage, fsm_strategy=FSMStrategy.USER_IN_CHAT)

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class DonateForm(StatesGroup):
    choosing_amount = State()
    entering_custom_amount = State()
    entering_nickname = State()
    choosing_payment = State()
    waiting_screenshot = State()

class SupportForm(StatesGroup):
    choosing_reason = State()
    entering_description = State()
    in_chat = State()

class AdminForm(StatesGroup):
    viewing_orders = State()
    viewing_users = State()
    in_chat = State()

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ÆMoney API
class YooMoneyAPI:
    def __init__(self, client_id, client_secret):
        self.client_id = client_id
        self.client_secret = client_secret
        self.base_url = "https://yoomoney.ru/api"
        self.token_url = "https://yoomoney.ru/oauth/token"
        self.access_token = None
        self.token_expires = 0
    
    async def get_access_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token —á–µ—Ä–µ–∑ Client Credentials"""
        if self.access_token and time.time() < self.token_expires:
            return self.access_token
        
        auth_header = base64.b64encode(f"{self.client_id}:{self.client_secret}".encode()).decode()
        
        headers = {
            'Authorization': f'Basic {auth_header}',
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        
        data = {
            'grant_type': 'client_credentials',
            'scope': 'account-info operation-history payment-p2p'
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(self.token_url, headers=headers, data=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        self.access_token = result['access_token']
                        self.token_expires = time.time() + result['expires_in'] - 300  # 5 –º–∏–Ω—É—Ç –∑–∞–ø–∞—Å–∞
                        logger.info("YooMoney access token –ø–æ–ª—É—á–µ–Ω")
                        return self.access_token
                    else:
                        error_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status} - {error_text}")
                        return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    async def check_payment(self, label):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ label"""
        access_token = await self.get_access_token()
        if not access_token:
            return False, None
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        data = {
            "type": "deposition",
            "label": label,
            "records": 10
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/operation-history",
                    headers=headers,
                    data=data
                ) as response:
                    if response.status == 200:
                        result = await response.json()
                        operations = result.get('operations', [])
                        for operation in operations:
                            if (operation.get('label') == label and 
                                operation.get('status') == 'success'):
                                return True, operation
                    elif response.status == 401:
                        logger.error("–¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –æ–±–Ω–æ–≤–ª—è–µ–º...")
                        self.access_token = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    return False, None
        except Exception as e:
            logger.error(f"YooMoney API error: {e}")
            return False, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆMoney API
yoomoney_api = YooMoneyAPI(YOOMONEY_CLIENT_ID, YOOMONEY_CLIENT_SECRET)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    reg_date TEXT,
                    is_admin BOOLEAN DEFAULT FALSE
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–Ω–∞—Ç–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS donations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    roblox_nickname TEXT,
                    amount INTEGER,
                    payment_method TEXT,
                    status TEXT DEFAULT 'new',
                    screenshot_id TEXT,
                    yoomoney_label TEXT,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
            await db.execute('''
                CREATE TABLE IF NOT EXISTS support_tickets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    reason TEXT,
                    description TEXT,
                    status TEXT DEFAULT 'open',
                    admin_id INTEGER,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —á–∞—Ç–æ–≤
            await db.execute('''
                CREATE TABLE IF NOT EXISTS chats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    admin_id INTEGER,
                    status TEXT DEFAULT 'active',
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(user_id, admin_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
            await db.execute('''
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id INTEGER,
                    user_id INTEGER,
                    message_text TEXT,
                    is_from_admin BOOLEAN,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (chat_id) REFERENCES chats(id)
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –µ—Å–ª–∏ –Ω–µ—Ç
            await db.execute(
                'INSERT OR IGNORE INTO users (user_id, username, full_name, reg_date, is_admin) VALUES (?, ?, ?, ?, ?)',
                (ADMIN_ID, 'admin', 'Administrator', datetime.now().isoformat(), True)
            )
            
            await db.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard(user_id=None):
    if user_id == ADMIN_ID:
        return admin_main_keyboard()
    
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üíé –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üì¶ –ú–æ–∏ –¥–æ–Ω–∞—Ç—ã")],
            [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def admin_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="üõí –ó–∞–∫–∞–∑—ã"), KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")],
            [KeyboardButton(text="üí¨ –ß–∞—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏")],
            [KeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")]
        ],
        resize_keyboard=True
    )

def orders_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"), KeyboardButton(text="‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def back_to_main_keyboard(user_id=None):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

def amount_choice_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="40 Robux"), KeyboardButton(text="80 Robux")],
            [KeyboardButton(text="120 Robux"), KeyboardButton(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def payment_method_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –ÆMoney")],
            [KeyboardButton(text="üì± –°–ë–ü")],
            [KeyboardButton(text="üí≥ –ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def support_reasons_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå Robux –Ω–µ –ø—Ä–∏—à–ª–∏")],
            [KeyboardButton(text="‚è≥ –ó–∞–∫–∞–∑ –¥–æ–ª–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")],
            [KeyboardButton(text="üí∏ –ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –Ω–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞")],
            [KeyboardButton(text="‚ùì –î—Ä—É–≥–æ–µ")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def chat_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞")]
        ],
        resize_keyboard=True
    )

def yoomoney_payment_keyboard(url):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)],
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")]
        ]
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
async def is_admin(user_id):
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            async with db.execute(
                'SELECT is_admin FROM users WHERE user_id = ?',
                (user_id,)
            ) as cursor:
                result = await cursor.fetchone()
                return result and result[0] == 1
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞: {e}")
        return user_id == ADMIN_ID

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"
    full_name = message.from_user.full_name
    
    is_user_admin = await is_admin(user_id)
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                'INSERT OR IGNORE INTO users (user_id, username, full_name, reg_date, is_admin) VALUES (?, ?, ?, ?, ?)',
                (user_id, username, full_name, datetime.now().isoformat(), is_user_admin)
            )
            await db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    if is_user_admin:
        # –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å
        admin_text = (
            "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å Mr.Robux!\n\n"
            "üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏\n"
            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
            "‚Ä¢ –ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"
        )
        await message.answer(admin_text, reply_markup=admin_main_keyboard())
    else:
        # –û–±—ã—á–Ω–æ–µ –º–µ–Ω—é
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Mr.Robux**!\n\n"
            "üéÆ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Robux —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π*\n\n"
            "üíé *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n"
            "‚Ä¢ –ÆMoney - –±—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞\n"
            "‚Ä¢ –°–ë–ü - –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É\n\n"
            "‚ö° *–í—ã–¥–∞—á–∞ –æ—Ç 1 –º–∏–Ω—É—Ç—ã*\n"
            "üõ°Ô∏è *100% –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞*"
        )
        await message.answer(welcome_text, reply_markup=main_menu_keyboard(user_id))

@dp.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_handler(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    is_user_admin = await is_admin(user_id)
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard(user_id))

@dp.message(F.text == "üîô –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")
async def exit_admin_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard(message.from_user.id))

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_stats_handler(message: Message):
    if not await is_admin(message.from_user.id):
        return
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
            async with db.execute(
                'SELECT COUNT(*), SUM(amount) FROM donations WHERE status = "completed"'
            ) as cursor:
                completed_orders, total_revenue = await cursor.fetchone()
                completed_orders = completed_orders or 0
                total_revenue = total_revenue or 0
            
            # –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            async with db.execute(
                'SELECT COUNT(*) FROM donations WHERE status = "new"'
            ) as cursor:
                new_orders = (await cursor.fetchone())[0] or 0
            
            # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with db.execute(
                'SELECT COUNT(*) FROM users'
            ) as cursor:
                total_users = (await cursor.fetchone())[0] or 0
            
            stats_text = (
                f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞–≥–∞–∑–∏–Ω–∞*\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üõí –ó–∞–∫–∞–∑–æ–≤: {completed_orders + new_orders}\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_orders}\n"
                f"üÜï –ù–æ–≤—ã—Ö: {new_orders}\n"
                f"üí∞ –í—ã—Ä—É—á–∫–∞: {total_revenue} Robux"
            )
            
            await message.answer(stats_text, reply_markup=admin_main_keyboard())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@dp.message(F.text == "üõí –ó–∞–∫–∞–∑—ã")
async def admin_orders_handler(message: Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        return
    
    await message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–æ–≤:", reply_markup=orders_keyboard())
    await state.set_state(AdminForm.viewing_orders)

@dp.message(AdminForm.viewing_orders, F.text.in_(["üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ", "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã"]))
async def admin_orders_type_handler(message: Message, state: FSMContext):
    status_map = {
        "üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã": "new",
        "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ": "completed", 
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ": "cancelled",
        "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç—ã": "refund"
    }
    
    status = status_map[message.text]
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            async with db.execute(
                '''SELECT d.id, d.amount, d.payment_method, d.created_date, u.username 
                   FROM donations d 
                   LEFT JOIN users u ON d.user_id = u.user_id 
                   WHERE d.status = ? 
                   ORDER BY d.created_date DESC LIMIT 10''',
                (status,)
            ) as cursor:
                orders = await cursor.fetchall()
        
        if orders:
            orders_text = f"üì¶ {message.text}:\n\n"
            for order in orders:
                orders_text += f"üîπ #{order[0]}: {order[1]} Robux ({order[2]}) - @{order[4]} - {order[3][:10]}\n"
        else:
            orders_text = f"üì≠ {message.text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        await message.answer(orders_text, reply_markup=orders_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤")

@dp.message(AdminForm.viewing_orders, F.text == "üîô –ù–∞–∑–∞–¥")
async def admin_orders_back_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=admin_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–Ω–∞—Ç–∞
@dp.message(F.text == "üíé –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å")
async def donate_handler(message: Message, state: FSMContext):
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=amount_choice_keyboard())
    await state.set_state(DonateForm.choosing_amount)

@dp.message(DonateForm.choosing_amount, F.text.in_(["40 Robux", "80 Robux", "120 Robux"]))
async def process_amount_choice(message: Message, state: FSMContext):
    amount = int(message.text.split()[0])
    await state.update_data(amount=amount)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {amount} Robux\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Roblox:", reply_markup=back_to_main_keyboard())
    await state.set_state(DonateForm.entering_nickname)

@dp.message(DonateForm.choosing_amount, F.text == "–î—Ä—É–≥–∞—è —Å—É–º–º–∞")
async def process_custom_amount_choice(message: Message, state: FSMContext):
    await message.answer("üíé –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É Robux:", reply_markup=back_to_main_keyboard())
    await state.set_state(DonateForm.entering_custom_amount)

@dp.message(DonateForm.choosing_amount)
async def invalid_amount_choice(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=amount_choice_keyboard())

@dp.message(DonateForm.entering_custom_amount)
async def process_custom_amount(message: Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard(message.from_user.id))
        return
        
    try:
        amount = int(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return
        
        await state.update_data(amount=amount)
        await message.answer(f"–í—ã –≤–≤–µ–ª–∏: {amount} Robux\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Roblox:", reply_markup=back_to_main_keyboard())
        await state.set_state(DonateForm.entering_nickname)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message(DonateForm.entering_nickname)
async def process_nickname(message: Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard(message.from_user.id))
        return
        
    nickname = message.text.strip()
    if len(nickname) < 3:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:")
        return
    
    await state.update_data(roblox_nickname=nickname)
    data = await state.get_data()
    amount = data['amount']
    
    await message.answer(
        f"üéØ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏**\n\n"
        f"üíé –°—É–º–º–∞: {amount} Robux\n"
        f"üë§ –ù–∏–∫–Ω–µ–π–º: {nickname}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_method_keyboard()
    )
    await state.set_state(DonateForm.choosing_payment)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(DonateForm.choosing_payment, F.text.in_(["üí≥ –ÆMoney", "üì± –°–ë–ü", "üí≥ –ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã"]))
async def process_payment_method(message: Message, state: FSMContext):
    payment_method = message.text.replace("üí≥ ", "").replace("üì± ", "")
    data = await state.get_data()
    
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"
    amount = data['amount']
    roblox_nickname = data['roblox_nickname']
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                'INSERT INTO donations (user_id, roblox_nickname, amount, payment_method) VALUES (?, ?, ?, ?)',
                (user_id, roblox_nickname, amount, payment_method)
            )
            await db.commit()
            
            async with db.execute('SELECT last_insert_rowid()') as cursor:
                donation_id = (await cursor.fetchone())[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard(user_id))
        await state.clear()
        return
    
    if payment_method == "–ÆMoney":
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π label
        label = f"donate_{user_id}_{int(time.time())}"
        
        # –ö–æ–¥–∏—Ä—É–µ–º target –¥–ª—è URL
        target = urllib.parse.quote(f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ {user_id}")
        
        payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YOOMONEY_WALLET}&quickpay-form=shop&targets={target}&paymentType=AC&sum={amount}&label={label}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º label –≤ –±–∞–∑—É
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                await db.execute(
                    'UPDATE donations SET yoomoney_label = ? WHERE id = ?',
                    (label, donation_id)
                )
                await db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è label: {e}")
        
        payment_text = (
            f"üí≥ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney*\n\n"
            f"üí∞ –°—É–º–º–∞: *{amount} —Ä—É–±.*\n"
            f"üë§ –ù–∏–∫–Ω–µ–π–º: {roblox_nickname}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª'"
        )
        
        await message.answer(payment_text, reply_markup=yoomoney_payment_keyboard(payment_url))
        await state.update_data(donation_id=donation_id, yoomoney_label=label)
        
    elif payment_method == "–°–ë–ü":
        await message.answer(
            f"üí≥ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü*\n\n"
            f"üí∞ –°—É–º–º–∞: *{amount} —Ä—É–±.*\n\n"
            f"üì± *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
            f"`{SBP_PHONE}`\n\n"
            f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {RECIPIENT_NAME}\n\n"
            f"*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.*",
            reply_markup=back_to_main_keyboard()
        )
        await state.set_state(DonateForm.waiting_screenshot)
        await state.update_data(donation_id=donation_id)
        
    elif payment_method == "–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã":
        await message.answer(
            f"üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã*\n\n"
            f"üí∞ –°—É–º–º–∞: *{amount} —Ä—É–±.*\n\n"
            f"üí≥ *–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
            f"`{BANK_CARD}`\n\n"
            f"üè¶ *–ë–∞–Ω–∫:* {BANK_NAME}\n"
            f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {RECIPIENT_NAME}\n\n"
            f"*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.*",
            reply_markup=back_to_main_keyboard()
        )
        await state.set_state(DonateForm.waiting_screenshot)
        await state.update_data(donation_id=donation_id)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = (
        f"üéØ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{donation_id}*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
        f"üéÆ –ù–∏–∫ –≤ Roblox: {roblox_nickname}\n"
        f"üíé –°—É–º–º–∞: {amount} Robux\n"
        f"üí≥ –°–ø–æ—Å–æ–±: {payment_method}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    )
    try:
        await bot.send_message(ADMIN_ID, admin_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@dp.message(DonateForm.choosing_payment, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_amount_choice(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=amount_choice_keyboard())
    await state.set_state(DonateForm.choosing_amount)

@dp.message(DonateForm.choosing_payment)
async def invalid_payment_choice(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=payment_method_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data == "check_payment")
async def check_payment_callback(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    label = data.get('yoomoney_label')
    
    if not label:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã")
        return
    
    success, operation = await yoomoney_api.check_payment(label)
    
    if success:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                await db.execute(
                    'UPDATE donations SET status = ? WHERE yoomoney_label = ?',
                    ('completed', label)
                )
                await db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        
        await callback.message.edit_text(
            "‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
            "Robux –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç.",
            reply_markup=None
        )
        await state.clear()
    else:
        await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
@dp.message(DonateForm.waiting_screenshot, F.content_type == ContentType.PHOTO)
async def process_screenshot(message: Message, state: FSMContext):
    data = await state.get_data()
    donation_id = data['donation_id']
    screenshot_id = message.photo[-1].file_id
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                'UPDATE donations SET screenshot_id = ?, status = ? WHERE id = ?',
                (screenshot_id, 'pending', donation_id)
            )
            await db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    
    await message.answer(
        "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç! –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
        reply_markup=main_menu_keyboard(message.from_user.id)
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            async with db.execute(
                'SELECT payment_method, amount FROM donations WHERE id = ?',
                (donation_id,)
            ) as cursor:
                result = await cursor.fetchone()
                payment_method = result[0] if result else "unknown"
                amount = result[1] if result else 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")
        payment_method = "unknown"
        amount = 0
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω—É
    caption = (
        f"üì∏ *–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{donation_id}*\n\n"
        f"üí≥ –°–ø–æ—Å–æ–±: {payment_method}\n"
        f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    )
    
    try:
        await bot.send_photo(ADMIN_ID, screenshot_id, caption=caption)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    await state.clear()

@dp.message(DonateForm.waiting_screenshot)
async def wrong_content_type(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", reply_markup=back_to_main_keyboard())

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async def check_payments_task():
    while True:
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                async with db.execute(
                    'SELECT id, yoomoney_label, user_id FROM donations WHERE status = "new" AND payment_method = "–ÆMoney"'
                ) as cursor:
                    pending_payments = await cursor.fetchall()
                    
                    for payment_id, label, user_id in pending_payments:
                        success, operation = await yoomoney_api.check_payment(label)
                        if success:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                            await db.execute(
                                'UPDATE donations SET status = ? WHERE id = ?',
                                ('completed', payment_id)
                            )
                            await db.commit()
                            
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            try:
                                await bot.send_message(
                                    user_id,
                                    "‚úÖ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
                                    "Robux –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç."
                                )
                            except:
                                pass
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
            await asyncio.sleep(300)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await init_db()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ÆMoney API
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ÆMoney...")
        access_token = await yoomoney_api.get_access_token()
        if access_token:
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ÆMoney —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ÆMoney API")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        asyncio.create_task(check_payments_task())
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∏
        await bot.delete_webhook(drop_pending_updates=True)
        
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        await asyncio.sleep(5)
        await main()

if __name__ == '__main__':
    asyncio.run(main())

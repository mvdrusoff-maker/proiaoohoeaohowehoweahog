import logging
import asyncio
import aiosqlite
import time
import os
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.strategy import FSMStrategy
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove, ContentType, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, CommandStart, StateFilter
import aiohttp
import json
import urllib.parse
import base64

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import *
except ImportError:
    BOT_TOKEN = os.getenv('BOT_TOKEN', '8057715167:AAEEv01CdStyZrK_Icb6ktLppZU85tXvnHU')
    ADMIN_ID = int(os.getenv('ADMIN_ID', '7942871538'))
    YOOMONEY_WALLET = os.getenv('YOOMONEY_WALLET', '4100119031273795')
    SBP_PHONE = os.getenv('SBP_PHONE', '+79931321491')
    BANK_CARD = os.getenv('BANK_CARD', '2204120124383866')
    BANK_NAME = os.getenv('BANK_NAME', '–ÆMoney')
    RECIPIENT_NAME = os.getenv('RECIPIENT_NAME', '–ê–Ω–Ω–∞ –í.')
    DATABASE_URL = os.getenv('DATABASE_URL', 'donations.db')
    DONATION_AMOUNTS = [40, 80, 120]
    PORT = int(os.getenv('PORT', 5000))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage, fsm_strategy=FSMStrategy.USER_IN_CHAT)

# –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
class DonateForm(StatesGroup):
    choosing_amount = State()
    entering_custom_amount = State()
    entering_nickname = State()
    choosing_payment = State()
    waiting_screenshot = State()

class SupportForm(StatesGroup):
    choosing_reason = State()
    entering_description = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    reg_date TEXT
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS donations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    roblox_nickname TEXT,
                    amount INTEGER,
                    payment_method TEXT,
                    status TEXT DEFAULT 'new',
                    screenshot_id TEXT,
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            await db.execute('''
                CREATE TABLE IF NOT EXISTS support_tickets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    reason TEXT,
                    description TEXT,
                    status TEXT DEFAULT 'open',
                    created_date TEXT DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            await db.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üíé –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üì¶ –ú–æ–∏ –¥–æ–Ω–∞—Ç—ã")],
            [KeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True
    )

def back_to_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
        resize_keyboard=True
    )

def amount_choice_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="40 Robux"), KeyboardButton(text="80 Robux")],
            [KeyboardButton(text="120 Robux"), KeyboardButton(text="–î—Ä—É–≥–∞—è —Å—É–º–º–∞")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def payment_method_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí≥ –ÆMoney")],
            [KeyboardButton(text="üì± –°–ë–ü")],
            [KeyboardButton(text="üí≥ –ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )

def support_reasons_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå Robux –Ω–µ –ø—Ä–∏—à–ª–∏")],
            [KeyboardButton(text="‚è≥ –ó–∞–∫–∞–∑ –¥–æ–ª–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")],
            [KeyboardButton(text="üí∏ –ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –Ω–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞")],
            [KeyboardButton(text="‚ùì –î—Ä—É–≥–æ–µ")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"
    full_name = message.from_user.full_name
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                'INSERT OR IGNORE INTO users (user_id, username, full_name, reg_date) VALUES (?, ?, ?, ?)',
                (user_id, username, full_name, datetime.now().isoformat())
            )
            await db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Mr.Robux**!\n\n"
        "üéÆ *–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ Robux —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π*\n\n"
        "üíé *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:*\n"
        "‚Ä¢ –ÆMoney - –±—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞\n"
        "‚Ä¢ –°–ë–ü - –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É\n\n"
        "‚ö° *–í—ã–¥–∞—á–∞ –æ—Ç 1 –º–∏–Ω—É—Ç—ã*\n"
        "üõ°Ô∏è *100% –≥–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞*"
    )
    
    await message.answer(welcome_text, reply_markup=main_menu_keyboard())

@dp.message(F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

@dp.message(F.text == "üíé –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å")
async def donate_handler(message: Message, state: FSMContext):
    await message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=amount_choice_keyboard())
    await state.set_state(DonateForm.choosing_amount)

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            async with db.execute(
                'SELECT COUNT(*), COALESCE(SUM(amount), 0) FROM donations WHERE user_id = ? AND status = "completed"',
                (user_id,)
            ) as cursor:
                result = await cursor.fetchone()
                donations_count = result[0] if result else 0
                total_donated = result[1] if result else 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        donations_count = 0
        total_donated = 0
    
    profile_text = (
        f"üìä **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        f"üÜî ID: {user_id}\n"
        f"üë§ –ò–º—è: {message.from_user.full_name}\n"
        f"üì¶ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤: {donations_count}\n"
        f"üíé –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ Robux: {total_donated}"
    )
    await message.answer(profile_text, reply_markup=main_menu_keyboard())

@dp.message(F.text == "üì¶ –ú–æ–∏ –¥–æ–Ω–∞—Ç—ã")
async def donations_handler(message: Message):
    user_id = message.from_user.id
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            async with db.execute(
                'SELECT id, amount, status, payment_method, created_date FROM donations WHERE user_id = ? ORDER BY created_date DESC LIMIT 5',
                (user_id,)
            ) as cursor:
                donations = await cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–Ω–∞—Ç–æ–≤: {e}")
        donations = []
    
    if donations:
        donations_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:**\n\n"
        for don in donations:
            status_emoji = "üÜï" if don[2] == "new" else "‚úÖ" if don[2] == "completed" else "‚ùå"
            donations_text += f"{status_emoji} #{don[0]}: {don[1]} Robux ({don[3]}) - {don[4][:10]}\n"
    else:
        donations_text = "üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ–Ω–∞—Ç."
    
    await message.answer(donations_text, reply_markup=main_menu_keyboard())

@dp.message(F.text == "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: Message, state: FSMContext):
    support_text = (
        "üÜò **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è:"
    )
    await message.answer(support_text, reply_markup=support_reasons_keyboard())
    await state.set_state(SupportForm.choosing_reason)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã
@dp.message(DonateForm.choosing_amount, F.text.in_(["40 Robux", "80 Robux", "120 Robux"]))
async def process_amount_choice(message: Message, state: FSMContext):
    amount = int(message.text.split()[0])
    await state.update_data(amount=amount)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {amount} Robux\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Roblox:", reply_markup=back_to_main_keyboard())
    await state.set_state(DonateForm.entering_nickname)

@dp.message(DonateForm.choosing_amount, F.text == "–î—Ä—É–≥–∞—è —Å—É–º–º–∞")
async def process_custom_amount_choice(message: Message, state: FSMContext):
    await message.answer("üíé –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É Robux:", reply_markup=back_to_main_keyboard())
    await state.set_state(DonateForm.entering_custom_amount)

@dp.message(DonateForm.choosing_amount)
async def invalid_amount_choice(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=amount_choice_keyboard())

@dp.message(DonateForm.entering_custom_amount)
async def process_custom_amount(message: Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        return
        
    try:
        amount = int(message.text)
        if amount <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return
        
        await state.update_data(amount=amount)
        await message.answer(f"–í—ã –≤–≤–µ–ª–∏: {amount} Robux\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Roblox:", reply_markup=back_to_main_keyboard())
        await state.set_state(DonateForm.entering_nickname)
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message(DonateForm.entering_nickname)
async def process_nickname(message: Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        return
        
    nickname = message.text.strip()
    if len(nickname) < 3:
        await message.answer("‚ùå –ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º:")
        return
    
    await state.update_data(roblox_nickname=nickname)
    data = await state.get_data()
    amount = data['amount']
    
    await message.answer(
        f"üéØ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏**\n\n"
        f"üíé –°—É–º–º–∞: {amount} Robux\n"
        f"üë§ –ù–∏–∫–Ω–µ–π–º: {nickname}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_method_keyboard()
    )
    await state.set_state(DonateForm.choosing_payment)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(DonateForm.choosing_payment, F.text.in_(["üí≥ –ÆMoney", "üì± –°–ë–ü", "üí≥ –ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã"]))
async def process_payment_method(message: Message, state: FSMContext):
    payment_method = message.text.replace("üí≥ ", "").replace("üì± ", "")
    data = await state.get_data()
    
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"
    amount = data['amount']
    roblox_nickname = data['roblox_nickname']
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                'INSERT INTO donations (user_id, roblox_nickname, amount, payment_method) VALUES (?, ?, ?, ?)',
                (user_id, roblox_nickname, amount, payment_method)
            )
            await db.commit()
            
            async with db.execute('SELECT last_insert_rowid()') as cursor:
                donation_id = (await cursor.fetchone())[0]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_keyboard())
        await state.clear()
        return
    
    if payment_method == "–ÆMoney":
        payment_url = f"https://yoomoney.ru/quickpay/confirm.xml?receiver={YOOMONEY_WALLET}&quickpay-form=shop&targets=–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ {donation_id}&paymentType=AC&sum={amount}&label=donate_{donation_id}"
        
        await message.answer(
            f"üí≥ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney*\n\n"
            f"üí∞ –°—É–º–º–∞: *{amount} —Ä—É–±.*\n\n"
            f"üëâ [–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ]({payment_url})\n\n"
            f"*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.*",
            reply_markup=back_to_main_keyboard()
        )
        
    elif payment_method == "–°–ë–ü":
        await message.answer(
            f"üí≥ *–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü*\n\n"
            f"üí∞ –°—É–º–º–∞: *{amount} —Ä—É–±.*\n\n"
            f"üì± *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
            f"`{SBP_PHONE}`\n\n"
            f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {RECIPIENT_NAME}\n\n"
            f"*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.*",
            reply_markup=back_to_main_keyboard()
        )
        
    elif payment_method == "–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã":
        await message.answer(
            f"üí≥ *–û–ø–ª–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã*\n\n"
            f"üí∞ –°—É–º–º–∞: *{amount} —Ä—É–±.*\n\n"
            f"üí≥ *–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:*\n"
            f"`{BANK_CARD}`\n\n"
            f"üè¶ *–ë–∞–Ω–∫:* {BANK_NAME}\n"
            f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {RECIPIENT_NAME}\n\n"
            f"*–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞.*",
            reply_markup=back_to_main_keyboard()
        )
    
    await state.set_state(DonateForm.waiting_screenshot)
    await state.update_data(donation_id=donation_id)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    admin_text = (
        f"üéØ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{donation_id}*\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
        f"üéÆ –ù–∏–∫ –≤ Roblox: {roblox_nickname}\n"
        f"üíé –°—É–º–º–∞: {amount} Robux\n"
        f"üí≥ –°–ø–æ—Å–æ–±: {payment_method}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    )
    try:
        await bot.send_message(ADMIN_ID, admin_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

@dp.message(DonateForm.choosing_payment, F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_amount_choice(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞:", reply_markup=amount_choice_keyboard())
    await state.set_state(DonateForm.choosing_amount)

@dp.message(DonateForm.choosing_payment)
async def invalid_payment_choice(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=payment_method_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
@dp.message(DonateForm.waiting_screenshot, F.content_type == ContentType.PHOTO)
async def process_screenshot(message: Message, state: FSMContext):
    data = await state.get_data()
    donation_id = data['donation_id']
    screenshot_id = message.photo[-1].file_id
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                'UPDATE donations SET screenshot_id = ?, status = ? WHERE id = ?',
                (screenshot_id, 'pending', donation_id)
            )
            await db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    
    await message.answer(
        "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç! –û–ø–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –æ–ø–ª–∞—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.",
        reply_markup=main_menu_keyboard()
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            async with db.execute(
                'SELECT payment_method, amount FROM donations WHERE id = ?',
                (donation_id,)
            ) as cursor:
                result = await cursor.fetchone()
                payment_method = result[0] if result else "unknown"
                amount = result[1] if result else 0
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")
        payment_method = "unknown"
        amount = 0
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω—É
    caption = (
        f"üì∏ *–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{donation_id}*\n\n"
        f"üí≥ –°–ø–æ—Å–æ–±: {payment_method}\n"
        f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    )
    
    try:
        await bot.send_photo(ADMIN_ID, screenshot_id, caption=caption)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    await state.clear()

@dp.message(DonateForm.waiting_screenshot)
async def wrong_content_type(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.", reply_markup=back_to_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
@dp.message(SupportForm.choosing_reason, F.text.in_(["‚ùå Robux –Ω–µ –ø—Ä–∏—à–ª–∏", "‚è≥ –ó–∞–∫–∞–∑ –¥–æ–ª–≥–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "üí∏ –ó–∞–∫–∞–∑ –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è, –Ω–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞", "‚ùì –î—Ä—É–≥–æ–µ"]))
async def support_reason_handler(message: Message, state: FSMContext):
    await state.update_data(reason=message.text)
    
    if message.text == "‚ùì –î—Ä—É–≥–æ–µ":
        await message.answer("üìù –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:", reply_markup=back_to_main_keyboard())
        await state.set_state(SupportForm.entering_description)
    else:
        user_id = message.from_user.id
        username = message.from_user.username or "–ù–µ—Ç username"
        full_name = message.from_user.full_name
        
        try:
            async with aiosqlite.connect(DATABASE_URL) as db:
                await db.execute(
                    'INSERT INTO support_tickets (user_id, reason, status) VALUES (?, ?, ?)',
                    (user_id, message.text, 'open')
                )
                await db.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
        
        ticket_text = (
            f"üé´ **–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (@{username})\n"
            f"üìå –ü—Ä–∏—á–∏–Ω–∞: {message.text}\n"
            f"üÜî ID: {user_id}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
        )
        
        try:
            await bot.send_message(ADMIN_ID, ticket_text)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–∫–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
        
        await message.answer("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.", 
                           reply_markup=main_menu_keyboard())
        await state.clear()

@dp.message(SupportForm.entering_description)
async def support_description_handler(message: Message, state: FSMContext):
    if message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        return
        
    data = await state.get_data()
    reason = data.get('reason', '–î—Ä—É–≥–æ–µ')
    
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ—Ç username"
    full_name = message.from_user.full_name
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            await db.execute(
                'INSERT INTO support_tickets (user_id, reason, description, status) VALUES (?, ?, ?, ?)',
                (user_id, reason, message.text, 'open')
            )
            await db.commit()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞: {e}")
    
    ticket_text = (
        f"üé´ **–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (@{username})\n"
        f"üìå –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n"
        f"üÜî ID: {user_id}\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    )
    
    try:
        await bot.send_message(ADMIN_ID, ticket_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∏–∫–µ—Ç–∞ –∞–¥–º–∏–Ω—É: {e}")
    
    await message.answer("‚úÖ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.", 
                       reply_markup=main_menu_keyboard())
    await state.clear()

@dp.message(SupportForm.choosing_reason, F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def support_back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

@dp.message(SupportForm.choosing_reason)
async def invalid_support_reason(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=support_reasons_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
@dp.message(Command("requisites"))
async def cmd_requisites(message: Message):
    requisites_text = (
        "üè¶ *–ù–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:*\n\n"
        f"üì± *–°–ë–ü (–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞):*\n"
        f"`{SBP_PHONE}`\n"
        f"üë§ {RECIPIENT_NAME}\n\n"
        f"üí≥ *–ü–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã:*\n"
        f"`{BANK_CARD}`\n"
        f"üè¶ {BANK_NAME}\n"
        f"üë§ {RECIPIENT_NAME}\n\n"
        f"üíé *–ÆMoney –∫–æ—à–µ–ª–µ–∫:*\n"
        f"`{YOOMONEY_WALLET}`\n\n"
        f"*–í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–µ—Ä–µ–≤–æ–¥—É —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID: {message.from_user.id}*"
    )
    
    await message.answer(requisites_text, reply_markup=main_menu_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
@dp.message(Command("status"))
async def cmd_status(message: Message):
    user_id = message.from_user.id
    
    try:
        async with aiosqlite.connect(DATABASE_URL) as db:
            async with db.execute(
                'SELECT id, amount, status, payment_method, created_date FROM donations WHERE user_id = ? ORDER BY created_date DESC LIMIT 1',
                (user_id,)
            ) as cursor:
                last_order = await cursor.fetchone()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        last_order = None
    
    if last_order:
        order_id, amount, status, payment_method, created_date = last_order
        
        status_emoji = {
            'new': 'üÜï',
            'pending': '‚è≥',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(status, 'üìä')
        
        status_text = {
            'new': '–æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã',
            'pending': '–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è',
            'completed': '–≤—ã–ø–æ–ª–Ω–µ–Ω',
            'cancelled': '–æ—Ç–º–µ–Ω–µ–Ω'
        }.get(status, status)
        
        response = (
            f"{status_emoji} *–°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ *#{order_id}\n\n"
            f"üíé –°—É–º–º–∞: {amount} Robux\n"
            f"üí≥ –°–ø–æ—Å–æ–±: {payment_method}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"üìÖ –î–∞—Ç–∞: {created_date}\n\n"
        )
        
        if status == 'new':
            response += "‚ÑπÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /requisites"
        elif status == 'pending':
            response += "‚è≥ –ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–π—Ç–µ –≤—ã–¥–∞—á–∏ Robux"
            
    else:
        response = "üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤."
    
    await message.answer(response, reply_markup=main_menu_keyboard())

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", reply_markup=main_menu_keyboard())
        return
    
    admin_text = (
        "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/orders - –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤\n"
        "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )
    await message.answer(admin_text, reply_markup=main_menu_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await init_db()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–µ–±—Ö—É–∫–∏ –µ—Å–ª–∏ –±—ã–ª–∏
        await bot.delete_webhook(drop_pending_updates=True)
        
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await asyncio.sleep(5)
        await main()

if __name__ == '__main__':
    asyncio.run(main())
